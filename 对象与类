1、在Python中，所有的数据（包括数字和字符串）实际都是对象

对象的三个特点：
（1）特性：id，唯一编号

（2）状态：所拥有的属性，例如：一个圆对象由radius状态（属性）

（3）行为：通过方法来实现行为

使用类来定义对象，对象是类的一个实例

2、可以使用id和type函数来获取对象的信息

id(n)，当程运行时，Python会为对象的id赋予一个独特的整数，在程序执行的过程中，对象的id不会改变
type()，求出对象的类型

3、对象
n=3，是将3赋值给n，但是实际上是将3赋值给了一个int对象，这个对象是由变量n引用的

你可以在一个对象上执行操作，操作是由函数定义的。
Python中对象所用的函数又被称为 ：方法

方法只能从一个特定的对象中调用
例如：字符串类型里面有：lower()返回小写字母（如果没有大写字母，则没有变化）、upper()返回大写字母（只对小写字母起作用）
strip()作用是移除字符串两端的空格符


4、定义类

class ClassName (父类名，没有可以不写):
   initializer
   methods
   
例如：
import math

class Circle:

    def __init__(self,radius=1):
        self.radius=radius

    def getPerimeter(self):
        return 2*self.radius*math.pi

    def getArea(self):
        return self.radius*self.radius*math.pi

    def setRadius(self,radius):
        self.radius=radius

5、构造对象
定义类之后，可以使用构造方法由类来创建对象，构造方法的两个任务：
（1）在内存中为类创建一个对象
（2）调用类的__inti__方法来初始化对象

例如：
c1=Circle()
c5=Circle(5)

对象成员是指它的数据域和方法：
（1）数据域：又称实例变量，因为每个对象（实例）的数据域上都有一个特定值
（2）方法：又称实例方法，因为方法被一个对象（实例）调用完成对象上的动作

使用圆点.来访问对象成员

self：是指向对象本身的参数，它的作用域是整个类

6、UML类图

对类模板和对象的阐释，可以使用UML（统一建模语言）符号来规范
(1)数据域：
dataFieldName:dataFieldType

(2)构造方法：
ClassName(parameterName:parameterType)

(3)方法：
methodName(parameterName:parameterType):returnType

相当于图形化的类定义操作

7、不变对象与可变对象

当一个可变对象传递给函数的时候，函数可能会改变这个对象的内容（状态）

当把对象传递给函数时，就是将这个对象的引用传递给函数。

（1）不变对象：数字、字符串
当把对象传递给函数时，就是将这个对象的引用传递给函数，函数外的对象的原始值不会改变

（2）可变对象：对象的内容在函数内被改变，则对象的原始值也会改变


8、隐藏数据域
为避免数据域被直接修改，不让客户端直接访问数据域，这被称为数据隐藏

私有数据域：以两个下划线开始定义：__
私有方法：同上

私有数据域和方法可以在类内部被访问，但他们不能在类的外部被访问，也就是说只有该类的方法可以访问它
因此提供一个get方法返回它的值；提供一个set方法来修改它的值
例如：
import math

class Circle:

    def __init__(self,radius=1):
        self.__radius=radius

    def getRadius(self):
        return self.__radius

    def getPerimeter(self):
        return 2*self.__radius*math.pi
    
    def getArea(self):
        return self.__radius*self.__radius*math.pi
    
使用两个下划线开头来命名私有数据域和方法，但不要以一个以上的下划线结尾，比如：__radius是一个私有数据域，但是__radius__并不是私有数据域

9、封装与抽象

类的抽象：指将类的实现与类的使用分离开来

类的封装：实现的细节被封装并对用户隐藏







  
  
  
  
  
  
     




