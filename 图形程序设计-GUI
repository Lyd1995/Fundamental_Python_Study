一、基本小构件
TKinter：Tk interface

1、引例
from tkinter import  * # Import all definitions from tkinter

window = Tk()
label = Label(window ,text="Welcome to Python")
button=Button(window ,text="Click me")
label.pack()
button.pack()
window.mainloop()


import：导入类，对象，函数
from：表示来自某个模块

设置按键文字的颜色
from tkinter import  * # Import all definitions from tkinter

def processOK():
    print("Ok button is clicked!")

def processCancel():
    print(("Cancel button is clicked"))

window = Tk()
btOK=Button(window, text="OK",fg="red",command=processOK())   
btCancle=Button(window, text="Cancel",fg="yellow",command=processCancel())

btOK.pack()
btCancle.pack()

window.mainloop()
"""
command：关联一个回调函数
fg:按键文字颜色
bg:按键框颜色
"""

也可以定义一个类来实现上述功能，执行时，直接调用那个类，一般来说，推荐定义类来实现该功能，这样可以提高代码的可重用性

2、小构件类

Button  一个用来执行一条命令的简单按钮（按下可以调用一个函数）

Canvas  结构化的图形
用于绘制图形、创建图形编辑器以及实现自定制的小构件类

Checkbutton   单击复选按钮，在值之间切换

Entry 一个文本输入域，也被称为文本域或者文本框

Frame  包含其他小构件的一个容器小构件

Label  显示文本或者图形

Menu  用来实现下拉或者弹出菜单的菜单栏

Menubutton  用来实现下拉菜单的菜单按钮

Message  显示文本，与Label相似，但是它能自动地将文本放在给定的宽度或者宽高比内

Radiobutton  单击单选按钮，设置变量为指定值，同时清除所有和同一个变量相关联的其他单选按钮

Text  格式化的文本显示，允许使用不同风格和属性显示，也支持文本编辑和内嵌图片与窗口

以上小构件有许多对象选项（但是第一个参数总是：父容器）：
（1）、前景色（fg）
（2）、背景色（bg）
（3）、字体（包括字体名、大小、风格）
例如：
Times 10 bold
Helvetica 10 bold italic
CourierNew 20 bold italic
Courier 20 bold italic overstrike underline
（4）、光标风格
（5）默认下，标签或者文本都是居中的，可以使用命名常量LEFT、CENTER或者RIGHT的justify选项改变基准线
（6）可以通过cursor选项指定arrow（默认）、circle、cross、plus或者其他图形的字符串值来指定鼠标光标的特定风格

小构件类属性：fg、bg、font、cursor、text、command

例1：
        window = Tk()
        btOK = Button(window, text="OK", fg="red", bg="white",
                      command=self.processOK)
        btOK["text"] = "I OK"
        btOK["bg"] = "#AB84F6"            # 这种写法是RRGGBB的格式，（R,G,B）
        btOK["cursor"] = "circle"
        btOK["justify"] = "left"
        btCancel = Button(window, text="Cancel", fg="red", bg="white",
                      command=self.processCancel)
        btOK.pack()
        btCancel.pack()

        window.mainloop()
例2：
from tkinter import *


class WidegetsDemo:
    def __init__(self):
        window = Tk()
        window.title("Widget Demo")

        # Add a check button, and a radio button to frame1
        frame1 = Frame(window)
        frame1.pack()
        self.v1 = IntVar()
        cbtBold = Checkbutton(frame1, text="Bold",
                              variable=self.v1, command=self.processCheckbutton)
        self.v2 = IntVar()
        rbRed = Radiobutton(frame1, text="Red", bg="red", font="Helvetica 10 bold italic",
                            variable=self.v2, value=1, cursor="plus",
                            command=self.processRadiobutton)
        rbYellow = Radiobutton(frame1, text="Yellow", bg="yellow", cursor="circle",
                            variable=self.v2, value=2,  font="Courier 10 bold italic overstrike underline",
                            command=self.processRadiobutton)
        cbtBold.grid(row=1, column=1)
        rbRed.grid(row=1, column=2)
        rbYellow.grid(row=1, column=3)

        # Add a label, an entry, a button, and a message to frame2
        frame2 = Frame(window)
        frame2.pack()
        label = Label(frame2, text="Enter your name: ", justify="left")
        self.name = StringVar()
        entryName = Entry(frame2, textvariable=self.name)
        btGetName = Button(frame2, text="Get Name",
                           command=self.processButton)
        message = Message(frame2, text="It is a Widget Demo")
        label.grid(row=1, column=1)
        entryName.grid(row=1, column=2)
        btGetName.grid(row=1, column=3)
        message.grid(row=5, column=2)

        # Add text
        text = Text(window)
        text.pack()
        text.insert(END,
                    "Tip\nThe best way to learn Tkinter is t read ")
        text.insert(END,
                    "these carefully designed examples and use them ")
        text.insert(END,
                    "to creat your applications.")
        window.mainloop()

    def processCheckbutton(self):
        print("Check button is " + ("checked " if self.v1.get() == 1 else "unchecked"))

    def processRadiobutton(self):
        print(("Red " if self.v2.get() == 1 else "Yellow ") + "is selected")

    def processButton(self):
        print("Your name is" + self.name.get())


WidegetsDemo()

二、几何管理器

Tkinter使用几何管理器将小构件放入容器内

首先每个小构件第一个参数都是容器（Frame()或者Tk()类型的，是指将这个小构件放在什么位置）
其次，拥有text（在小构件上显示文字）、image（设置小构件的图形）属性

1、包管理器：pack
包管理器，将小构件依次地一个放置在另一个的顶部或者将它们挨个挨个地放置，可以通过fill选项将小构件充满它的容器

参数：
（1）side：设置为LEFT时，下一个小构件将被放在左侧，默认情况下是TOP放在前一个小构件的下面
意思是，放置的小构件向哪边对齐，LEFT是每次小构件都放置在左边，TOP每次都往顶上放置，因此第一个小构件在最上方，第二个则在第一个下面
（2）fill：X（水平填充）、Y（垂直填充）、BOTH（水平和垂直两个方向都填充）
（3）expand：告诉包管理器分配额外的空间给小构件，数值必须大于0

示例：
Label(window, text="blue", bg="blue").pack()
Label(window, text="red", bg="red").pack(fill=BOTH, expand=1)
Label(window, text="green", bg="green").pack(side=LEFT,fill=X)


2、网格管理器：grid
网管管理器将小构件放置在容器中一个看不见的网格的每个单元中
可以将小构件放置在某个特定的行与列
如果想将小构件放置在多行多列，可以使用rowspan和columnspan

message.grid(row=1, column=1, rowspan=3, columnspan=4)

3、位置管理器：place
将小构件放置在绝对位置上
例如：
Label(window, text="llll").place(x=20, y=20)


三、画布：Canvas

************可以使用Canvas小构件来显示图形

1、简单几何图形
create_rectangle(x1, y1, x2, y2)：矩形
create_oval(x1, y1, x2, y2)：椭圆（这里的两个点的坐标是椭圆外接矩形的左上角、右下角的坐标）
create_arc(x1, y1, x2, y2, start, extent)：圆弧
create_polygon(x1, y1, x2, y2, x3, y3)：多边形（有多少个点，写多少参数）
create_line(x1, y1, x2, y2)：线段
create_text(x, y, text)：文本

示例：
Canvas.create_oval(10, 10, 190, 90, fill="red", tags="oval")

2、显示图像
这个功能很低级，只能打开GIF格式的图片
使用PhotoImage类创建图像

photo = PhotoImage(file = imagefilename)
对于PhotoImage对象只能在一个线程下使用，在主要模块中已经用TK()启动一个线程，再在次模块中启动一个线程就不能调用PhotoImage对象。
所以开启希望开启次窗口可采用用frame或者toplevel去代替。


四、鼠标、按键事件和绑定

可以使用bind方法，将鼠标和按键事件绑定到一个小构件

