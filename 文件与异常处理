一、文件

1、文件名

绝对文件名：包含了绝对路径与文件名
例如：C:\Users\84235\mystuff\ex3.py

相对文件名：仅仅包含文件名
例如：ex3.py

2、文件分类
（1）文本文件：能够使用文本编辑器处理或者notepad处理的，都是文本文件

（2）二进制文件：除了文本文件，其他的都是二进制文件


3、打开文件
如何向（从）一个文件写（读）数据？
需要创建一个和物理文件相关的文件对象（注意：无论物理文件本身是何种格式，都将创建同一类型的对象）

打开文件的语法：
fileVariable = open(filename,mode)
mode:指定这个文件将被如何使用（读、写、读写...，r、w、a（从文件尾追加数据）、rb（读取二进制数据）、wb）

打开当前目录下的文件，filename只要使用相对文件名即可
其他目录下的文件，需要使用绝对文件名

读取文件
input=open("C:\\Users\\84235\\mystuff\\scores.txt","r")
print(input.read())

read(n:int):从文件中读取特定数目的字符，包括换行符；无参数时，将全部字符读取，存入字符串
readline():读取下一行，返回字符串
readlines():读取所有行,并将每一行作为一个字符串，存入字符串列表


写入文件：
input1=open("C:\\Users\\84235\\mystuff\\scores.txt","w")
input1.write("Bill Clintion\n")
input1.write("George Cl\n")
input1.close()

input=open("C:\\Users\\84235\\mystuff\\scores.txt","r")
print(input.read())
注意1：write写入会覆盖掉原来的内容，因为"w"是从头开始写的，如果不想覆盖，用"a"在文件尾追加内容

注意2：使用write必须在每句最后加上换行符

4、测试文件的存在性
import  os.path

if os.path.isfile("C:\\Users\\84235\\mystuff\\scores.txt")
    print("file is exists")
    

5、追加数据
input=open("C:\\Users\\84235\\mystuff\\scores.txt","a")

6、读取写入数据
from  random import  randint
def main():
    # 打开文件
    outfile=open("C:\\Users\\84235\\mystuff\\scores.txt","w");

    # 写入数据
    for i in range(5):
        outfile.write(str(randint(0,9))+" ")
    outfile.close();

    infile=open("C:\\Users\\84235\\mystuff\\scores.txt","r");
    s=infile.read()
    numbers=[eval(x) for x in s.split()]

    for i in range(numbers.__len__()):
        print(numbers[i])
main()
注意：这里和java有所不同，需要自己手动将空格去掉

7、从网站上获取数据
urlopen函数可以打开一个资源定位器，并从网上读取数据



二、异常处理
上一节中，如果输入的文件或者URL不存在，则会抛出一个IO异常（IOError）

异常是在运行时出现的错误，使用try语句可以对异常进行处理

1、处理异常语句try
语法：
try:
    <body>
except<ExceptionType>:
    <handler>
.....
else:
    <process_else>
finally:
    <process_finnal>
    
except 异常类型：如果try中抛出异常，则按照顺序与except子句中的异常类型进行匹配
如果匹配某个except子句，则转入该段程序，之后的except子句将不会被执行

以下两个子句都是可选项：
else：如果try中没有异常，那么执行完try后，便会执行else子句
finally：无论有无异常，都会执行finally子句

注：主函数有异常发生时，若有n个except子句，当前n-1个except子句都不匹配时，系统会默认匹配最后一个
注：如果不是主函数，找不到匹配的异常类型，则会将这个异常抛给调用者，让调用者处理这个异常

正确输入文件名：
while True:
    try:
        filename=input("Enter a filename: ")
        infile=open("filename","r")
        break
    except IOError:
        print("File "+filename+" does not exists. Try again")
 
 
2、抛出异常
异常来自哪里？又是如何产生的？

附属在异常上的信息包裹在一个对象中，异常产生于一个函数
当这个函数检测到错误时，它将使用下面的语法从一个正确的异常类创建一个对象，并将这个异常抛给这个函数的调用者：
raise ExceptionClass("Something is wrong")

3、异常工作机制
假设程序检测到传递给函数的一个参数与这个函数的合约冲突
例如：这个参数必须是非负的，但是传递了一个负数，这个程序将会创建一个RuntimeError类的实例，并将它抛出

ex=RuntimeError("Wrong argument")
raise ex
上述两句可以合并为一句：raise RuntimeError("Wrong argument")

raise一般与if连用

4、异常类型
ZeroDivisionError:
TypeError
IndexError
RuntimeError
IOError
NameError
FileNotFoundError

5、使用对象处理异常
例如：
try:
    number=eval(input("Enter a number: "))
    print("The number entered is ",number)
except NameError as ex:
    print("Exception: ",ex)
输出：
Enter a number: k
Exception:  name 'k' is not defined

6、自定义异常类：

大部分的异常ZeroDivisionError、TypeError、IndexError等继承自StandardError类
StandardError类继承自Exception类
Exception类继承自BaseException类

可以根据以上的异常类型，自定义一个异常子类：
例如：
class InvalidRadiusError(RuntimeError):
     def __init__(self):
        super.__init__()
        self.radius=radius


7、with的使用
python 2.5以后增加了with表达式的语法

class controlled_execution:
    def __enter__(self):
        set things up
        return thing
    def __exit__(self, type, value, traceback):
        tear things down

with controlled_execution() as thing:
        do something
在这里，python使用了with-as的语法。当python执行这一句时，会调用__enter__函数，
然后把该函数return的值传给as后指定的变量。
之后，python会执行下面do something的语句块。
最后不论在该语句块出现了什么异常，都会在离开时执行__exit__。 
with-as表达式极大的简化了每次写finally的工作，这对保持代码的优雅性是有极大帮助的。
