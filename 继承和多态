一、继承

（一）父类与子类
继承可以定义一个通用类（父类），随后将它扩展为更多特定的类（子类）

语法：
class 子类名(父类名)：
..........

子类可以继承父类的方法、数据域

super():使用这个类可以避免显式的指向父类（同Java里的功能一样）
super().__init__()  调用父类的初始化方法
切忌：
不能写成：super().__init__(self)  因为这里的self是在指代子类

（二）覆盖方法
子类从父类继承方法，但有时需要对方法进行修改，这称作：方法覆盖

*********为了覆盖父类的方法，子类中的方法必须使用与父类方法一样的方法头


（三）object类
Python中的所有类都派生自Object类

object类在Python库中定义，如果一个类没有指定它的父类，那么它的父类默认是object类

1、object类的四个方法

object类中定义的所有方法，都有两条前导下划线和两条后置下划线
（1）__new__()
当创建一个对象时，__new__()被自动调用，这个方法随后调用__init__()方法来初始化这个对象

（2）__init__()
一般来说，只需要覆盖__init__()方法来初始化新的类中定义的数据域

（3）__str__()
返回一个描述该对象的字符串，默认情况：返回一个：该对象所属类名+十六进制内存地址
j = object()
print(j.__str__())
<object object at 0x0000023EE5B2E0B0>
这个信息几乎没什么用，一般要将这个方法覆盖

（4）__eq__()
如果两个对象相等，那么这个方法返回true
如果两个对象的内容相同，但不是同一对象，那么这个方法返回false

一般来说，这个方法也要覆盖：当两个对象内容一样时，返回true

二、多态（大体可以参照java）

1、isinstance：判断一个对象是否为一个类的实例

语法：
isinstance(对象名,类名):boolean  返回Boolean型


三、类之间的关系

常见的有三种：关联、聚合、继承

（一）关联
一种常用的二进制关系，可以描述两个类之间的一个动作

例如：一个学生选择一门课程，就是Student类与Course类之间的一种关联；
一个教员教授一门课程就是Faculty类和Course类回见的一种关联

在一个关联关系中的每个类可能会指定一个多样性

多样性：可以是一个数字或者是一个区间，它指定这个关系涉及多少个类的对象；字符*意味着无限个对象数量
